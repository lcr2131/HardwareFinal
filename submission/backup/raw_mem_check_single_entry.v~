///////////////////////////////////////////////////////////////////////////////////////////////////
//	Programmer:	Tong Zhang								//
//	Modification Date:	12/09/2012							//
//	Module function:	single entry module, for checking raw hazard between new issue  //
//				instruction and all currently executing  ones			//	
//												//
//////////////////////////////////////////////////////////////////////////////////////////////////


module raw_mem_check_single_entry #(parameter des = 'd4, source1 = 'd4, source2 = 'd4,
					entry_width = 'd4, entry_num = 'd0)
(
	input	rst,
	input	clk,

	input	ins_in_1_vld,
	input	[des-1 : 0]	ins_in_1_des,
	input	[source1-1 : 0]	ins_in_1_source1,
	input	[source2-1 : 0]	ins_in_1_source2,

	input	ins_in_2_vld,
	input	[des-1 : 0]	ins_in_2_des,
	input	[source1-1 : 0]	ins_in_2_source1,
	input	[source2-1 : 0]	ins_in_2_source2,

	input	ins_in_3_vld,
	input	[des-1 : 0]	ins_in_3_des,
	input	[source1-1 : 0]	ins_in_3_source1,
	input	[source2-1 : 0]	ins_in_3_source2,

	input	ins_in_4_vld,
	input	[des-1 : 0]	ins_in_4_des,
	input	[source1-1 : 0]	ins_in_4_source1,
	input	[source2-1 : 0]	ins_in_4_source2,

	input	ins_final_1_vld,	//valid signals sent back from the last checker to update the table
	input	ins_final_2_vld,
	input	ins_final_3_vld,
	input	ins_final_4_vld,

	input	ins_back_1_vld,	//valid signal sent back after an instruction is committed 
				//to update the table
	input	[des-1 : 0]	ins_back_1_des,
	input	ins_back_2_vld,
	input	[des-1 : 0]	ins_back_2_des,
	input	ins_back_3_vld,
	input	[des-1 : 0]	ins_back_3_des,
	input	ins_back_4_vld,
	input	[des-1 : 0]	ins_back_4_des,

	output	logic ins_out_1_vld,
	output	logic ins_out_2_vld,
	output	logic ins_out_3_vld,
	output	logic ins_out_4_vld
);

	reg [entry_width - 1 : 0]	entry_data;

	logic add_1_flag;
	logic add_2_flag;
	logic add_3_flag;
	logic add_4_flag;

	logic minus_1_flag;
	logic minus_2_flag;
	logic minus_3_flag;
	logic minus_4_flag;

	logic add_flag;
	logic minus_flag;

always_comb
begin
	if (ins_in_1_vld)
	begin
		if (entry_data != 0 && (ins_in_1_des == entry_num || 
					ins_in_1_source1 == entry_num || 
					ins_in_1_source2 == entry_num))
			ins_out_1_vld = 'd0;
		else
			ins_out_1_vld = 'd1;
	end
	else
	begin
		ins_out_1_vld = 'd0;
	end
end

always_comb
begin
	if (ins_in_2_vld)
	begin
		if (entry_data != 0 && (ins_in_2_des == entry_num || 
					ins_in_2_source1 == entry_num || 
					ins_in_2_source2 == entry_num))
			ins_out_2_vld = 'd0;
		else
			ins_out_2_vld = 'd1;
	end
	else
	begin
		ins_out_2_vld = 'd0;
	end
end

always_comb
begin
	if (ins_in_3_vld)
	begin
		if (entry_data != 0 && (ins_in_3_des == entry_num || 
					ins_in_3_source1 == entry_num || 
					ins_in_3_source2 == entry_num))
			ins_out_3_vld = 'd0;
		else
			ins_out_3_vld = 'd1;
	end
	else
	begin
		ins_out_3_vld = 'd0;
	end
end

always_comb
begin
	if (ins_in_4_vld)
	begin
		if (entry_data != 0 && (ins_in_4_des == entry_num || 
					ins_in_4_source1 == entry_num || 
					ins_in_4_source2 == entry_num))
			ins_out_4_vld = 'd0;
		else
			ins_out_4_vld = 'd1;
	end
	else
	begin
		ins_out_4_vld = 'd0;
	end
end

always_comb
begin
	if (ins_final_1_vld && ins_in_1_des == entry_num)
		add_1_flag = 'd1;
	else
		add_1_flag = 'd0;
end

always_comb
begin
	if (ins_final_2_vld && ins_in_2_des == entry_num)
		add_2_flag = 'd1;
	else
		add_2_flag = 'd0;
end

always_comb
begin
	if (ins_final_3_vld && ins_in_3_des == entry_num)
		add_3_flag = 'd1;
	else
		add_3_flag = 'd0;
end

always_comb
begin
	if (ins_final_4_vld && ins_in_4_des == entry_num)
		add_4_flag = 'd1;
	else
		add_4_flag = 'd0;
end

always_comb
begin
	if (ins_back_1_vld && ins_back_1_des == entry_num)
		minus_1_flag = 'd1;
	else
		minus_1_flag = 'd0;
end

always_comb
begin
	if (ins_back_2_vld && ins_back_2_des == entry_num)
		minus_2_flag = 'd1;
	else
		minus_2_flag = 'd0;
end

always_comb
begin
	if (ins_back_3_vld && ins_back_3_des == entry_num)
		minus_3_flag = 'd1;
	else
		minus_3_flag = 'd0;
end

always_comb
begin
	if (ins_back_4_vld && ins_back_4_des == entry_num)
		minus_4_flag = 'd1;
	else
		minus_4_flag = 'd0;
end

assign add_flag = add_1_flag || add_2_flag || add_3_flag || add_4_flag;
assign minus_flag = minus_1_flag || minus_2_flag || minus_3_flag || minus_4_flag;

always_ff @ (posedge clk or posedge rst)
begin
	if (rst)
		entry_data <= 'd0;
	else if (add_flag && ~minus_flag)
		entry_data <= entry_data + 'd1;
	else if (~add_flag && minus_flag)
		entry_data <= entry_data - 'd1;
end


endmodule
